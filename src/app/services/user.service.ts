import { inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import {
  doc,
  docData,
  DocumentReference,
  Firestore,
  getDoc,
  setDoc,
  updateDoc,
  collection,
  addDoc,
  deleteDoc,
  collectionData,
  serverTimestamp,
  query,
  where,
  orderBy,
  limit,
  DocumentData,
  getDocs,
  Timestamp,
} from '@angular/fire/firestore';
import { User, UserRole } from '../types/firestore.types';

@Injectable({
  providedIn: 'root',
})
export class UserService {
  private firestore: Firestore = inject(Firestore);
  private collectionName = 'users';

  // Create a new user with specific ID (from Firebase Auth)
  async createUser(userData: User): Promise<void> {
    try {
      // Ensure userData has an id field
      if (!userData.id) {
        userData.id = await this.getAutoGeneratedId();
      }
      const docRef = doc(this.firestore, this.collectionName, userData.id);
      await setDoc(docRef, userData);
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }

  async createEmptyUser(email: string, role: UserRole): Promise<string> {
    try {
      const userId = await this.getAutoGeneratedId();
      const userData: User = {
        id: userId,
        email: email,
        role: role,
        created_at: serverTimestamp()
      };
      const docRef = doc(this.firestore, this.collectionName, userId);
      await setDoc(docRef, userData);
      return userId;
    } catch (error) {
      console.error('Error creating empty user:', error);
      throw error;
    }
  }

  // get an auto-generated ID
  async getAutoGeneratedId(): Promise<string> {
    try {
      const tempDocRef = doc(collection(this.firestore, this.collectionName));
      return tempDocRef.id;
    } catch (error) {
      console.error('Error generating auto ID:', error);
      throw error;
    }
  }
  // Get user by ID
  getUser(userId: string): Observable<User | undefined> {
    const docRef = doc(this.firestore, this.collectionName, userId);
    return docData(docRef, { idField: 'id' }) as Observable<User | undefined>;
  }

  // Get user by email
  getUserByEmail(email: string): Observable<User[]> {
    console.log('Searching for user with email:', email);
    const q = query(
      collection(this.firestore, this.collectionName),
      where('email', '==', email),
      limit(1)
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Get user by email (async version for better error handling)
  async getUserByEmailAsync(email: string): Promise<User | null> {
    try {
      console.log('Searching for user with email (async):', email);
      const q = query(
        collection(this.firestore, this.collectionName),
        where('email', '==', email),
        limit(1)
      );
      const snapshot = await getDocs(q);
      
      if (snapshot.empty) {
        console.log('No user found with email:', email);
        return null;
      }
      
      const userData = snapshot.docs[0].data() as User;
      userData.id = snapshot.docs[0].id; // Ensure ID is set
      console.log('User found:', userData);
      return userData;
    } catch (error) {
      console.error('Error getting user by email:', error);
      throw error;
    }
  }

  // Check if email exists
  async emailExists(email: string): Promise<boolean> {
    try {
      const q = query(
        collection(this.firestore, this.collectionName),
        where('email', '==', email),
        limit(1)
      );
      const snapshot = await getDocs(q);
      return !snapshot.empty;
    } catch (error) {
      console.error('Error checking email existence:', error);
      return false;
    }
  }

  // Check if user needs activation (exists in Firestore but not in Firebase Auth)
  async needsActivation(email: string): Promise<boolean> {
    try {
      console.log('Checking if user needs activation for email:', email);
      
      // Use the new async method for better error handling
      const userData = await this.getUserByEmailAsync(email);
      
      if (!userData) {
        console.log('User not found in Firestore, no activation needed');
        return false; // User doesn't exist at all
      }

      console.log('User found in Firestore:', userData);
      
      // If user has a Firebase Auth UID format (28 characters), it's already activated
      // Auto-generated Firestore IDs are 20 characters, Firebase Auth UIDs are 28
      const needsActivation = userData.id.length === 20;
      console.log(`User ID: ${userData.id}, length: ${userData.id.length}, needs activation: ${needsActivation}`);
      
      return needsActivation;
    } catch (error) {
      console.error('Error checking activation status:', error);
      return false;
    }
  }

  // Get users by role
  getUsersByRole(role: UserRole): Observable<User[]> {
    const q = query(
      collection(this.firestore, this.collectionName),
      where('role', '==', role),
      orderBy('created_at', 'desc')
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Update user
  async updateUser(userId: string, userData: Partial<User>): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.collectionName, userId);
      await updateDoc(docRef, userData);
    } catch (error) {
      console.error('Error updating user:', error);
      throw error;
    }
  }

  // Delete user
  async deleteUser(userId: string): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.collectionName, userId);
      await deleteDoc(docRef);
    } catch (error) {
      console.error('Error deleting user:', error);
      throw error;
    }
  }

  // Get all users with pagination
  getUsers(pageSize: number = 20): Observable<User[]> {
    const q = query(
      collection(this.firestore, this.collectionName),
      orderBy('created_at', 'desc'),
      limit(pageSize)
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Migrate user from Firestore auto-generated ID to Firebase Auth UID
  async migrateUserToFirebaseAuth(oldId: string, newId: string, userData: User): Promise<void> {
    try {
      // Create new document with Firebase Auth UID
      const newDocRef = doc(this.firestore, this.collectionName, newId);
      const newUserData: User = {
        ...userData,
        id: newId
      };
      await setDoc(newDocRef, newUserData);
      
      // Delete old document
      const oldDocRef = doc(this.firestore, this.collectionName, oldId);
      await deleteDoc(oldDocRef);
    } catch (error) {
      console.error('Error migrating user to Firebase Auth:', error);
      throw error;
    }
  }
  
  // Debug method to list all users and their emails
  async debugListAllUsers(): Promise<void> {
    try {
      const q = query(collection(this.firestore, this.collectionName));
      const snapshot = await getDocs(q);
      
      console.log('=== DEBUG: All users in collection ===');
      console.log(`Total users found: ${snapshot.size}`);
      
      snapshot.forEach((doc) => {
        const userData = doc.data() as User;
        console.log(`ID: ${doc.id}, Email: ${userData.email}, Role: ${userData.role}`);
      });
      console.log('=== End of user list ===');
    } catch (error) {
      console.error('Error listing all users:', error);
    }
  }

  // Debug method to search for users by partial email match
  async debugSearchUsersByPartialEmail(partialEmail: string): Promise<void> {
    try {
      const q = query(collection(this.firestore, this.collectionName));
      const snapshot = await getDocs(q);
      
      console.log(`=== DEBUG: Searching for users containing "${partialEmail}" ===`);
      
      const matchingUsers: any[] = [];
      snapshot.forEach((doc) => {
        const userData = doc.data() as User;
        if (userData.email && userData.email.toLowerCase().includes(partialEmail.toLowerCase())) {
          matchingUsers.push({
            id: doc.id,
            email: userData.email,
            role: userData.role
          });
        }
      });
      
      console.log(`Found ${matchingUsers.length} matching users:`, matchingUsers);
      console.log('=== End of search ===');
    } catch (error) {
      console.error('Error searching users:', error);
    }
  }
  
}

import { inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import {
  doc,
  docData,
  DocumentReference,
  Firestore,
  getDoc,
  setDoc,
  updateDoc,
  collection,
  addDoc,
  deleteDoc,
  collectionData,
  serverTimestamp,
  query,
  where,
  orderBy,
  limit,
  DocumentData,
  getDocs,
  Timestamp,
} from '@angular/fire/firestore';
import { User, UserRole } from '../types/firestore.types';
import { LoadingService } from './loading.service';
import { AutoLoading } from '../decorators/loading.decorator';

@Injectable({
  providedIn: 'root',
})
export class UserService {
  private firestore: Firestore = inject(Firestore);
  public loadingService: LoadingService = inject(LoadingService);
  private collectionName = 'users';

  // Create a new user with specific ID (from Firebase Auth)
  async createUser(userData: User): Promise<void> {
    try {
      // Ensure userData has an id field
      if (!userData.id) {
        userData.id = await this.getAutoGeneratedId();
      }
      const docRef = doc(this.firestore, this.collectionName, userData.id);
      await setDoc(docRef, userData);
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }

  async createEmptyUser(email: string, roles: UserRole[], temporaryPassword?: string): Promise<string> {
    try {
      // Validar que se proporcione al menos un rol
      if (!roles || roles.length === 0) {
        throw new Error('User must have at least one role');
      }
      
      const userId = await this.getAutoGeneratedId();
      const userData: User = {
        id: userId,
        email: email,
        roles: roles,
        primary_role: roles[0], // El primer rol ser√° el principal por defecto
        created_at: serverTimestamp(),
        temporary_password: temporaryPassword,
        needs_password_change: !!temporaryPassword // true if temporaryPassword exists
      };
      const docRef = doc(this.firestore, this.collectionName, userId);
      await setDoc(docRef, userData);
      return userId;
    } catch (error) {
      console.error('Error creating empty user:', error);
      throw error;
    }
  }

  // get an auto-generated ID
  async getAutoGeneratedId(): Promise<string> {
    try {
      const tempDocRef = doc(collection(this.firestore, this.collectionName));
      return tempDocRef.id;
    } catch (error) {
      console.error('Error generating auto ID:', error);
      throw error;
    }
  }
  // Get user by ID
  getUser(userId: string): Observable<User | undefined> {
    const docRef = doc(this.firestore, this.collectionName, userId);
    return docData(docRef, { idField: 'id' }) as Observable<User | undefined>;
  }

  // Get user by email
  getUserByEmail(email: string): Observable<User[]> {
    console.log('Searching for user with email:', email);
    const q = query(
      collection(this.firestore, this.collectionName),
      where('email', '==', email),
      limit(1)
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Get user by email (async version for better error handling)
  async getUserByEmailAsync(email: string): Promise<User | null> {
    try {
      console.log('Searching for user with email (async):', email);
      const q = query(
        collection(this.firestore, this.collectionName),
        where('email', '==', email),
        limit(1)
      );
      const snapshot = await getDocs(q);
      
      if (snapshot.empty) {
        console.log('No user found with email:', email);
        return null;
      }
      
      const userData = snapshot.docs[0].data() as User;
      userData.id = snapshot.docs[0].id; // Ensure ID is set
      console.log('User found:', userData);
      return userData;
    } catch (error) {
      console.error('Error getting user by email:', error);
      throw error;
    }
  }

  // Check if email exists
  async emailExists(email: string): Promise<boolean> {
    try {
      const q = query(
        collection(this.firestore, this.collectionName),
        where('email', '==', email),
        limit(1)
      );
      const snapshot = await getDocs(q);
      return !snapshot.empty;
    } catch (error) {
      console.error('Error checking email existence:', error);
      return false;
    }
  }

  // Check if user needs activation (exists in Firestore but not in Firebase Auth)
  async needsActivation(email: string): Promise<boolean> {
    try {
      console.log('Checking if user needs activation for email:', email);
      
      // Use the new async method for better error handling
      const userData = await this.getUserByEmailAsync(email);
      
      if (!userData) {
        console.log('User not found in Firestore, no activation needed');
        return false; // User doesn't exist at all
      }

      console.log('User found in Firestore:', userData);
      
      // If user has a Firebase Auth UID format (28 characters), it's already activated
      // Auto-generated Firestore IDs are 20 characters, Firebase Auth UIDs are 28
      const needsActivation = userData.id.length === 20;
      console.log(`User ID: ${userData.id}, length: ${userData.id.length}, needs activation: ${needsActivation}`);
      
      return needsActivation;
    } catch (error) {
      console.error('Error checking activation status:', error);
      return false;
    }
  }

  // Get users by role
  getUsersByRole(role: UserRole): Observable<User[]> {
    const q = query(
      collection(this.firestore, this.collectionName),
      where('role', '==', role),
      orderBy('created_at', 'desc')
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Update user
  async updateUser(userId: string, userData: Partial<User>): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.collectionName, userId);
      await updateDoc(docRef, userData);
    } catch (error) {
      console.error('Error updating user:', error);
      throw error;
    }
  }

  // Delete user
  async deleteUser(userId: string): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.collectionName, userId);
      await deleteDoc(docRef);
    } catch (error) {
      console.error('Error deleting user:', error);
      throw error;
    }
  }

  // Get all users with pagination
  getUsers(pageSize: number = 20): Observable<User[]> {
    const q = query(
      collection(this.firestore, this.collectionName),
      orderBy('created_at', 'desc'),
      limit(pageSize)
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // Migrate user from Firestore auto-generated ID to Firebase Auth UID
  async migrateUserToFirebaseAuth(oldId: string, newId: string, userData: User): Promise<void> {
    try {
      // Create new document with Firebase Auth UID in users collection
      const newDocRef = doc(this.firestore, this.collectionName, newId);
      const newUserData: User = {
        ...userData,
        id: newId
      };
      await setDoc(newDocRef, newUserData);
      
      // Migrate user data in role-specific collection based on user roles
      if (userData.roles && userData.roles.length > 0) {
        for (const role of userData.roles) {
          await this.migrateRoleSpecificData(oldId, newId, role);
        }
      }
      
      // Delete old document from users collection
      const oldDocRef = doc(this.firestore, this.collectionName, oldId);
      await deleteDoc(oldDocRef);
      
      console.log(`Successfully migrated user ${userData.email} from ${oldId} to ${newId}`);
    } catch (error) {
      console.error('Error migrating user to Firebase Auth:', error);
      throw error;
    }
  }

  // Helper method to migrate role-specific data
  private async migrateRoleSpecificData(oldId: string, newId: string, role: UserRole): Promise<void> {
    try {
      switch (role) {
        case 'tutor':
          await this.migrateTutorData(oldId, newId);
          break;
        case 'student':
          await this.migrateStudentData(oldId, newId);
          break;
        case 'institution':
          await this.migrateInstitutionData(oldId, newId);
          break;
        default:
          console.log(`No role-specific migration needed for role: ${role}`);
      }
    } catch (error) {
      console.error(`Error migrating role-specific data for ${role}:`, error);
      throw error;
    }
  }

  // Migrate tutor data
  private async migrateTutorData(oldId: string, newId: string): Promise<void> {
    try {
      const oldTutorRef = doc(this.firestore, 'tutors', oldId);
      const tutorSnapshot = await getDoc(oldTutorRef);
      
      if (tutorSnapshot.exists()) {
        const tutorData = tutorSnapshot.data();
        
        // Update user_id in the tutor data
        const updatedTutorData = {
          ...tutorData,
          user_id: newId
        };
        
        // Create new tutor document with new ID
        const newTutorRef = doc(this.firestore, 'tutors', newId);
        await setDoc(newTutorRef, updatedTutorData);
        
        // Delete old tutor document
        await deleteDoc(oldTutorRef);
        
        console.log(`Migrated tutor data from ${oldId} to ${newId}`);
      } else {
        console.log(`No tutor data found for user ${oldId}`);
      }
    } catch (error) {
      console.error('Error migrating tutor data:', error);
      throw error;
    }
  }

  // Migrate student data
  private async migrateStudentData(oldId: string, newId: string): Promise<void> {
    try {
      const oldStudentRef = doc(this.firestore, 'students', oldId);
      const studentSnapshot = await getDoc(oldStudentRef);
      
      if (studentSnapshot.exists()) {
        const studentData = studentSnapshot.data();
        
        // Update user_id in the student data
        const updatedStudentData = {
          ...studentData,
          user_id: newId
        };
        
        // Create new student document with new ID
        const newStudentRef = doc(this.firestore, 'students', newId);
        await setDoc(newStudentRef, updatedStudentData);
        
        // Delete old student document
        await deleteDoc(oldStudentRef);
        
        console.log(`Migrated student data from ${oldId} to ${newId}`);
      } else {
        console.log(`No student data found for user ${oldId}`);
      }
    } catch (error) {
      console.error('Error migrating student data:', error);
      throw error;
    }
  }

  // Migrate institution data
  private async migrateInstitutionData(oldId: string, newId: string): Promise<void> {
    try {
      const oldInstitutionRef = doc(this.firestore, 'institutions', oldId);
      const institutionSnapshot = await getDoc(oldInstitutionRef);
      
      if (institutionSnapshot.exists()) {
        const institutionData = institutionSnapshot.data();
        
        // Update user_id in the institution data
        const updatedInstitutionData = {
          ...institutionData,
          user_id: newId
        };
        
        // Create new institution document with new ID
        const newInstitutionRef = doc(this.firestore, 'institutions', newId);
        await setDoc(newInstitutionRef, updatedInstitutionData);
        
        // Delete old institution document
        await deleteDoc(oldInstitutionRef);
        
        console.log(`Migrated institution data from ${oldId} to ${newId}`);
      } else {
        console.log(`No institution data found for user ${oldId}`);
      }
    } catch (error) {
      console.error('Error migrating institution data:', error);
      throw error;
    }
  }
  
  // Debug method to list all users and their emails
  async debugListAllUsers(): Promise<void> {
    try {
      const q = query(collection(this.firestore, this.collectionName));
      const snapshot = await getDocs(q);
      
      console.log('=== DEBUG: All users in collection ===');
      console.log(`Total users found: ${snapshot.size}`);
      
      snapshot.forEach((doc) => {
        const userData = doc.data() as User;
        console.log(`ID: ${doc.id}, Email: ${userData.email}, Roles: ${userData.roles?.join(', ')}`);
      });
      console.log('=== End of user list ===');
    } catch (error) {
      console.error('Error listing all users:', error);
    }
  }

  // Debug method to search for users by partial email match
  async debugSearchUsersByPartialEmail(partialEmail: string): Promise<void> {
    try {
      const q = query(collection(this.firestore, this.collectionName));
      const snapshot = await getDocs(q);
      
      console.log(`=== DEBUG: Searching for users containing "${partialEmail}" ===`);
      
      const matchingUsers: any[] = [];
      snapshot.forEach((doc) => {
        const userData = doc.data() as User;
        if (userData.email && userData.email.toLowerCase().includes(partialEmail.toLowerCase())) {
          matchingUsers.push({
            id: doc.id,
            email: userData.email,
            roles: userData.roles || []
          });
        }
      });
      
      console.log(`Found ${matchingUsers.length} matching users:`, matchingUsers);
      console.log('=== End of search ===');
    } catch (error) {
      console.error('Error searching users:', error);
    }
  }

  // ========== M√âTODOS PARA M√öLTIPLES ROLES ==========

  // M√©todo para agregar rol a un usuario
  async addRoleToUser(userId: string, newRole: UserRole): Promise<void> {
    try {
      const userDoc = await getDoc(doc(this.firestore, this.collectionName, userId));
      if (userDoc.exists()) {
        const userData = userDoc.data() as User;
        const currentRoles = userData.roles || [];
        
        if (!currentRoles.includes(newRole)) {
          const updatedRoles = [...currentRoles, newRole];
          await updateDoc(doc(this.firestore, this.collectionName, userId), {
            roles: updatedRoles,
            updated_at: serverTimestamp()
          });
        }
      }
    } catch (error) {
      console.error('Error adding role to user:', error);
      throw error;
    }
  }

  // M√©todo para remover rol de un usuario
  async removeRoleFromUser(userId: string, roleToRemove: UserRole): Promise<void> {
    try {
      const userDoc = await getDoc(doc(this.firestore, this.collectionName, userId));
      if (userDoc.exists()) {
        const userData = userDoc.data() as User;
        const currentRoles = userData.roles || [];
        
        if (currentRoles.length > 1) { // No permitir remover si solo tiene un rol
          const updatedRoles = currentRoles.filter(role => role !== roleToRemove);
          await updateDoc(doc(this.firestore, this.collectionName, userId), {
            roles: updatedRoles,
            primary_role: updatedRoles[0], // Establecer el primer rol como principal
            updated_at: serverTimestamp()
          });
        }
      }
    } catch (error) {
      console.error('Error removing role from user:', error);
      throw error;
    }
  }

  // M√©todo para establecer el rol principal
  async setPrimaryRole(userId: string, primaryRole: UserRole): Promise<void> {
    try {
      const userDoc = await getDoc(doc(this.firestore, this.collectionName, userId));
      if (userDoc.exists()) {
        const userData = userDoc.data() as User;
        const currentRoles = userData.roles || [];
        
        if (currentRoles.includes(primaryRole)) {
          await updateDoc(doc(this.firestore, this.collectionName, userId), {
            primary_role: primaryRole,
            updated_at: serverTimestamp()
          });
        }
      }
    } catch (error) {
      console.error('Error setting primary role:', error);
      throw error;
    }
  }

  // M√©todo para obtener todos los roles de un usuario
  getUserRoles(userId: string): Observable<UserRole[]> {
    return this.getUser(userId).pipe(
      map(userData => {
        if (!userData) return [];
        return userData.roles || [];
      })
    );
  }

  // M√©todo para verificar si un usuario tiene un rol espec√≠fico
  userHasRole(userId: string, role: UserRole): Observable<boolean> {
    return this.getUserRoles(userId).pipe(
      map(roles => roles.includes(role))
    );
  }

  // M√©todo para obtener usuarios por m√∫ltiples roles
  getUsersByRoles(roles: UserRole[]): Observable<User[]> {
    const q = query(
      collection(this.firestore, this.collectionName),
      where('roles', 'array-contains-any', roles),
      orderBy('created_at', 'desc')
    );
    return collectionData(q, { idField: 'id' }) as Observable<User[]>;
  }

  // M√©todo para migrar usuarios existentes al sistema de m√∫ltiples roles (DEPRECATED - Ya no necesario)
  async migrateUsersToMultiRole(): Promise<void> {
    console.warn('Migration method is deprecated - all users now require multiple roles by default');
    // Ya no es necesario migrar usuarios, todos deben tener roles como array requerido
  }
  
}
